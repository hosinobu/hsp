#include "sgf.hsp"
#include "goban.hsp"
#include "tree.hsp"
#include "開発完了/sqr.hsp"
#include "開発完了/keyfps.hsp"
#include "hspext.as"

screen 0, 640,480
sgf = "棋譜/1.sgf"
objsize 80
pos,80

time = 1000
input time

jidou = 0
着手番号表示 = 0
chkbox "自動再生", jidou: chk_ID = stat
chkbox "着手番号", 着手番号表示
set_treeview 30,30
tree_direction = 6
input tree_direction

button gosub "SGFを読み込む", *loadfile
button gosub "SGFをコピー", *getsgf

await 100
gosub *loadfile
await 100

pretime = keyfpstime

*main
	manage_keyfps

	nownode = Treeview_info()
	if nownode = -1: nownode = topnode
	
	マウスます取得 board,p
	
	if _getkey(2) == 1{
		if treeview_m() >= 0{
			set_current_node treeview_m()
			TreeView_toggle_openclose
		}
	}
	if _getkey(1) == 1{
		dragging_flag = 1
		get_treeview_position tmp
		dragstartx = mousex - tmp
		dragstarty = mousey - tmp.1
		
		if treeview_m() >=0{
			
			set_current_node stat
			
		}else{
			
			着手 board,p,p.1
			
			if stat{
				
				if 逆手番(get_turn(board)) = 白番:手番 = "W": else: 手番 = "B"
				座標 = "  "
				poke 座標,0,'a'+p
				poke 座標,1,'a'+p.1
	
				if serch_SGFchild_byxy(nownode,手番, 座標) = -1{
					make_new_SGFnode nownode
					new = stat
					add_SGFchild nownode, new
					set_property_data new, 手番, 座標
					TreeView_InsertItem new, nownode
					
				}else{
					new = stat
				}
				set_current_node new
			}
		}
	}

	if _getkey(1) == -1 & dragging_flag{
		dragging_flag = 0
		dragstartx = 0
		dragstarty = 0
	}

	if _getkey(17) >= 1{ //CTRL
		if _getkey('C') == 1 { //CTRL + C
			gosub*getsgf
		}
		if _getkey('V') == 1 { //CTRL + V
			sdim s, $FFFF
			clipget s, $FFFF
			title "loading from clipboard"
			gosub*make_tree_from_SGF
		}
	}
	
	mw = mousew
	if mw < 0 : gosub*move_next
	if mw > 0 : gosub*move_back

	if dragging_flag{
		set_treeview_position mousex - dragstartx, mousey - dragstarty
	}

	if jidou & pretime + time <= keyfpstime{
		gosub *move_next
	}
	
	if prenode != nownode{
		prenode = nownode
		//ツリービューから実際のSGFノードのIDを取り出して盤面作成
		make_board_from_sgf get_tree_item_id(nownode)
	}
	tmp = get_property_data(nownode, "C")
	split tmp," ", c_list

	redraw 2
		a = double(c_list) * 255
		color a,a,a
		boxf 0,80,640,480
		碁盤表示 board , 着手番号表示
		set_tree_direction tree_direction
		treeview_draw topnode
	redraw 1

	goto*main



*getsgf
	get_node_sgf topnode, a
	clipset a
	return
	
*loadfile
	棋譜取得 1
	notesel s
	noteload sgf
	gosub*make_tree_from_SGF
	return

*make_tree_from_SGF
	
	load_sgf s,-1 //SGFからツリー作成、トップノードの番号がstatに返る。
	
	topnode = stat
	nownode = topnode
	set_current_node topnode
	
	tmp = get_property_data(topnode,"SZ")
	split tmp,":", x, y
	if stat == 1: y = x

	dim board
	newmod board, goban, int(x), int(y), 23, 23,150, 40

	stack = topnode ; 現在のノード番号
	stack_p = -1　　; 親ノード番号
	sn = 1
	while sn
		sn--

		;現ノードをツリーに追加
		nnode = stack(sn)
		pnode = stack_p(sn)
		TreeView_InsertItem nnode, pnode
		
		//子ノードを全て全部積む。
		repeat get_SGF_childs(nnode, childlist)
			stack(sn) = childlist(cnt)
			stack_p(sn) = nnode
			sn++
		loop

	wend
	
	return

#deffunc make_board_from_sgf int v
	dim kifu
	get_nodelist v, kifu
	盤面作成 board, kifu
	return

*move_next
	set_current_node get_tree_root_child(nownode)
	pretime = keyfpstime
	gosub *treeview移動
	return
	
*move_back
	if get_tree_parent(nownode) != -1{
		set_current_node get_tree_parent(nownode)
		pretime = keyfpstime
		gosub *treeview移動
	}
	return

*treeview移動
	get_treeview_node_size ns
	if (get_tree_direction() & 1){
		set_treeview_position 300, 300 + get_手数(board) * ns.1 * -(((get_tree_direction() & 2) != 0) * 2 - 1)
	}else{ 
		set_treeview_position      300 + get_手数(board) * ns   * -(((get_tree_direction() & 2) != 0) * 2 - 1 ),300
	}
	return