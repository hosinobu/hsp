#ifndef goban
#const global 空点 0
#const global 黒番 1
#const global 白番 2

#module goban board, 手番, 黒が取った数, 白が取った数, コウ禁止点, 最後の着手,手数, stepboard
#modinit int x, int y, int p1, int p2, int p3, int p4
	dim board, x, y
	clear_board thismod
	masx = p1
	masy = p2
	px = p3
	py = p4
	return
#modfunc clear_board int x, int y
	if x == 0{
		dim board, length(board), length2(board)
		dim stepboard, length(board), length2(board)
	}else: if y == 0{
		dim board, x, x
		dim stepboard , x, x
	}else{
		dim board, x, y
		dim stepboard , x, y
	}
	黒が取った数 = 0
	白が取った数 = 0
	コウ禁止点 = -1,-1
	最後の着手 = -1,-1
	手番 = 黒番
	手数 = 0
	return
#modcfunc get_turn
	return 手番
#modcfunc get_手数
	return 手数
#modfunc 着手 int x, int y

	if ( コウ禁止点 == x && コウ禁止点.1 == y): return 0
	res = 打てるかチェック(board, x, y, 手番)

	if res{

		board(x,y) = 手番
		最後の着手 = x,y
		手数++
		stepboard(x,y) = 手数
		
		repeat num_n
			board(xx(cnt),yy(cnt)) = 空点
		loop
		if 手番 == 黒番: 黒が取った数 += num_n
		if 手番 == 白番: 白が取った数 += num_n

		手番 = 逆手番(手番)

		コウ禁止点 = -1, -1
		
		if num_n = 1{ // コウによる禁止点発生チェック
			tmpxx = xx
			tmpyy = yy
			if 打てるかチェック(board, xx, yy, 手番){
				if num_n = 1{
					コウ禁止点 = tmpxx, tmpyy
				}
			}
		}
	}

	return res
	
#modfunc getcapture array a
	a = 黒が取った数,白が取った数
	return
	
#modfunc 盤面作成 array a

	clear_board thismod
	for iii, length(a)-1, -1, -1
		tmpp = get_property_data(SGF_NODE@global(a(iii)),"B")
		if tmpp = "": tmpp = get_property_data(SGF_NODE@global(a(iii)),"W")
		if tmpp != ""{
			xxx = peek(tmpp,0) - 'a'
			yyy = peek(tmpp,1) - 'a'
			着手 thismod, xxx, yyy
		}
	next
	return

#defcfunc 打てるかチェック array a, int x, int y,int t

	if x < 0 || x >= length(a): return 0
	if y < 0 || y >= length2(a): return 0
	if a(x,y) != 空点: return 0
	
	dim kk, length(a),length2(a)
	memcpy kk, a, length(a) * length2(a) * 4
	
	kk(x,y) = t

	num_n = 0

	repeat 4
		nnx = x + sx(cnt)
		nny = y + sy(cnt)
		if nnx < 0 || nnx >= length(a): continue
		if nny < 0 || nny >= length2(a): continue
		if kk(nnx,nny) == 逆手番(t){
			if ある地点が取られ状態か？ (kk, nnx, nny ){
				repeat stat
					xx(num_n) = agehamax(cnt)
					yy(num_n) = agehamay(cnt)
					num_n++
				loop
			}
		}
	loop
	
	if num_n = 0 { //一つも取れずに
	
		dim kk, length(a),length2(a)
		memcpy kk, a, length(a) * length2(a) * 4
		
		kk(x,y) = t

		;うとうとしている地点が取られているなら、打てない
		if ある地点が取られ状態か？(kk,x,y): return 0
	}
	
	return 1
#defcfunc ある地点が取られ状態か？ array a, int x, int y
	if a(x,y) == 空点: return 0
	num = 0
	turn = a(x,y)
	aturn = 逆手番(turn)
	sn = 0
	dim b,length(a),length2(a)
	memcpy b,a,length(a)*length2(a)*4
	スタックに積んで置き換える b, x, y, aturn
	
	while sn
		sn--
		nx = stackx(sn)
		ny = stacky(sn)
		for i,,4
			nnx = nx + sx(i)
			nny = ny + sy(i)
			if nnx < 0 || nnx >= length(b): _continue
			if nny < 0 || nny >= length2(b): _continue

			switch b(nnx, nny)
			case 空点: return 0
			case turn
			スタックに積んで置き換える b, nnx, nny, aturn
			swbreak
			swend
		next
	wend
	return num
#deffunc スタックに積んで置き換える array a, int x, int y, int t
	agehamax(num) = x
	agehamay(num) = y
	num++
	stackx(sn) = x
	stacky(sn) = y
	sn++
	a(x,y) = t
	return
#defcfunc 逆手番 int p1
	if p1 == 黒番: return 白番
	if p1 == 白番: return 黒番
	return 空点
	
#modfunc 碁盤表示 int 碁石番号表示

	color $cd,$85,$3f
	boxf px, py, px + length(board) * masx, py + length2(board) * masy
	color
	repeat length(board)
		line px + masx * cnt + masx / 2, py + masy/2, px + masx * cnt + masx/2, py + masy * length2(board) - masy/2 - 1
	loop
	repeat length2(board)
		line px + masx/2, py + masy * cnt + masy/2, px + masx * length(board) - masx/2 - 1, py + masy * cnt + masy/2
	loop
	repeat length(board): m= cnt
		repeat length2(board)
			posx = px + m   * masx
			posy = py + cnt * masy
			pos posx + 4, posy + 2
			
			switch board(m,cnt)
			case 黒番
				color
				circle posx, posy , posx + masx, posy + masy
				gosub*draw_last_move_mark
				if 碁石番号表示{
					color 210,210,210
					mes stepboard(m,cnt)
				}
			swbreak
			case 白番
				color 210,210,210
				circle posx, posy , posx + masx, posy + masy
				gosub*draw_last_move_mark
				if 碁石番号表示{
					color
					mes stepboard(m,cnt)
				}
			swbreak
			case 空点
				if (コウ禁止点 == m) && (コウ禁止点.1 ==cnt){
					
					color 210,21,21
					circle posx + masx/4, posy + masy/4, posx + masx*3/4, posy + masy*3/4
					
				}
				if 碁石番号表示: if stepboard(m,cnt) > 0{
					color, 240
					mes stepboard(m,cnt)
				}
			swbreak
			swend
		loop
	loop
	
	return
*draw_last_move_mark
	if m == 最後の着手 &&  cnt == 最後の着手.1{
		color 21,220,21
		circle posx + masx/5, posy + masy/5, posx + masx*4/5, posy + masy*4/5
	}
	return
#modfunc マウスます取得 array result
	result = (mousex - px) / masx - (mousex < px), (mousey - py) / masy - (mousey < py)
	return
#deffunc board_serch_init
	sx = 1,0,-1,0
	sy = 0,-1,0,1
	return
#global
board_serch_init
#endif
