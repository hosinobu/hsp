#module
#define global push(%1, %2) %1(%1_NUM__) = %2: %1_NUM__++
#define global ctype pop(%1) _pop(%1,%1_NUM__)
#define global ctype shift(%1) _shift(%1,%1_NUM__)
#define global unshift(%1, %2) tmp = %2:_unshift %1, %1_NUM__, tmp
#define global ctype getlen(%1) %1_NUM__
#define global setlen(%1,%2) %1_NUM__ = %2
#define global clear(%1) %1_NUM__ = 0
#define global splice(%1, %2, %3 = $FFFF, %4 = ___TMP___, %5 = -1) _splice %1, %2, %3, %4, %5 * (varptr(___TMP___) !=  varptr(%4)): setlen %1, stat
#define global show(%1) repeat getlen(%1):mes(%1.cnt):loop
#defcfunc _pop array a, var b
	b--
	return a(b)

#defcfunc _shift array a, var b
	t = a
	b--
	repeat b
		a.cnt = a(cnt+1)
	loop

	return t
#deffunc _unshift array a, var b, var value
	for i, b,,-1
		a(i) = a(i-1)
	next
	a = value
	b++
	return
#deffunc _splice array a, int start, int deleteCount, array additem, int additem_max
	aimax = additem_max
	amax = length(a)
	
	if aimax < 0: aimax = length(additem)

	clear tmp1
	clear tmp2

	for i,, amax
		if i < start{
			push tmp1, a(i)
		}else:if i >= start + deleteCount{
			push tmp2, a(i)
		}
	next
	
	clear a
	
	for i,,getlen(tmp1)
		push a, tmp1(i)
	next
	for i,, aimax
		push a, additem(i)
	next
	for i,,getlen(tmp2)
		push a, tmp2(i)
	next
	return getlen(a)
#global