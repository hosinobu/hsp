//グローバル変数宣言。各モジュール内からは、インデックス番号で管理。
dimtype treenode@global, 5


#module tree parent,　item_id, childs,　cn, openflag
#modinit int p1, int p2, local i
	parent = p1
	item_id = p2
	openflag = 1
	set_tree_direction thismod, 2 | 4
	mref i, 2 //自分のインデックス番号がiに入る
	return i
#modfunc add_child_treeview int p1, local i
	for i,,cn
		if i == p1: return i ; すでにその子を持っている
	next
	childs(cn) = p1
	cn++
	
	mref i, 2
	set_tree_parent treenode@global(p1), i
	
	return cn - 1
#modfunc set_tree_parent int p1
	parent = p1
	return
#modcfunc get_tree_parent
	return parent
#modfunc set_openflag int p1
	openflag = p1
	return
#modfunc toggle_openflag
	openflag ^ 1
	return
#modfunc set_tree_pos int p1, int p2
	px = p1
	py = p2
	return


#modfunc set_tree_direction int p1
	xyswap = p1 & 1
	x_reverse = ((p1 & 3) >> 1) * 2 -1
	y_reverse = ((p1 & 7) >> 2) * 2 -1

	return
	
#define global ctype check_area(%1,%2,%3,%4,%5,%6) ((%5)>=(%1) && (%5)<=(%3) && (%6)>=(%2) && (%6)<=(%4)) 


#modfunc _tree_view int 予定高さ, int 確定ノードの深さ, int 確定ノードの高さ, array result, int 現在の深さ, local 現ノードの高さ, local i, local res
	
	現ノードの高さ = 予定高さ
	if 現ノードの高さ <= takasa(現在の深さ){//すでにノードがある
		現ノードの高さ = takasa(現在の深さ) + 1　//現ノードをそのノードの下にする。
	}


	if openflag{

		for i,,cn
	
			if i = 0{
				//最初の子ノードの処理が終わったとき、現ノードを確定させる
				_tree_view treenode@global(childs(i)), 現ノードの高さ, 確定ノードの深さ, 確定ノードの高さ, res, 現在の深さ + 1
				// res.0 === 処理が終わったそのノードの高さが返ってくる
				// res.1 === 処理が終わったそのノードが(斜めで戻ってきたか)のフラグが入っている、
				現ノードの高さ = res - res.1
			}else{
				_tree_view treenode@global(childs(i)), 現ノードの高さ, 現在の深さ, 現ノードの高さ, res, 現在の深さ + 1
			}
			
		next
	}

	sx = node_sizex / 2
	sy = node_sizey / 2



	//現ノードの位置を計算
	xx = 現在の深さ     * node_sizex * x_reverse
	yy = 現ノードの高さ * node_sizey * y_reverse

	if xyswap{
		x = px + yy
		y = py + xx
	}else{
		x = px + xx
		y = py + yy
	}

	if check_area(x-sx/2, y-sy/2, x+sx/2, y+sy/2, mousex, mousey){
		tree_view_mouse = item_id //マウスがこのアイテム上にあるかを取得
	}

	//現在の深度での高さを更新
	takasa(現在の深さ) = 現ノードの高さ
	if 現ノードの高さ < res{
		takasa(現在の深さ) = res - 1
	}


	//確定ノードまで横棒を使わずに戻れるか？
	result = 現ノードの高さ, 1
	height = 現ノードの高さ
	for i, 現在の深さ - 1, 確定ノードの深さ, -1
	
		height--
		if height <= takasa(i){
			 //戻れない。つまり横棒が描かれることになる
			result.1 = 0
			_break
		}

	next

	//スタートノード以外は親ノードへ向かう線を描画
	color 250,250,250
	if 現在の深さ{
		xyswap_line x, y,  -node_sizex, -node_sizey * result.1
	}
	//縦棒描画　resには最後の子ノードの処理結果(高さ）が入っているのでそれを利用
	xyswap_line x, y, ,  node_sizey * limit((res - 現ノードの高さ - 1),0)

	//ノード描画
	color 0, 250, 120
	circle x-sx/2,y-sy/2,x+sx/2,y+sy/2

	if openflag{
		//ノードにidを表示してみる
		color 0, 0, 0
		pos x - sx/2 , y - sy/2
		mes item_id
	}else{
		color 200,30,30
		circle x-sx/5,y-sy/5,x+sy/5,y+sy/5
	}
	
	return

#deffunc xyswap_line int p1, int p2, int p3, int p4
	if xyswap{
		line p1,p2, p1 + p4 * y_reverse, p2 + p3 * x_reverse
	}else{
		line p1,p2, p1 + p3 * x_reverse, p2 + p4 * y_reverse
	}

	return 

#modfunc tree_view int 予定高さ, int 確定ノードの深さ, int 確定ノードの高さ, array result
	
	dim takasa, 1024
	foreach takasa
		takasa.cnt = -1
	loop
	
	tree_view_mouse = -1
	
	_tree_view thismod, 予定高さ, 確定ノードの深さ, 確定ノードの高さ, result

	return

#deffunc set_treeview int p1, int p2, int p3, int p4
	node_sizex = p1
	node_sizey = p2
	px = p3
	py = p4
	return
#defcfunc treeview_m
	return tree_view_mouse

#deffunc set_treeview_position int p1, int p2
	px = p1
	py = p2
	return
#deffunc get_treeview_position array a
	a = px, py
	return
#deffunc get_treeview_node_size array a
	a = node_sizex, node_sizey
	return
#global
set_treeview 30,30




#module
#deffunc set_current_node int p1
	current_node = p1
	return
	
#defcfunc treeview_info
	return current_node
	
#deffunc treeview_insertItem int item_id, int 挿入先item_id

    newmod treenode@global, tree, 挿入先item_id, item_id
	it(item_id) = stat
	
	if 挿入先item_id >= 0{
		if length(it) > 挿入先item_id{
			add_child_treeview treenode@global(it(挿入先item_id)),it(item_id)
		}
	}
    
	return
#deffunc treeview_toggle_openclose
	toggle_openflag treenode@global(current_node)
	return
#deffunc treeview_draw int p1
	
	tree_view treenode@global(it(p1)), -1,-1,-1,tmp
	return

#global

