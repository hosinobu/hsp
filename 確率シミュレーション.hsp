/*
赤い球が１０個、青い球が８個、白い球が６個、黒い球が４個入った袋からまず、３個取り出す。
取り出した赤い球の数だけさらに袋から取り出した後、全ての黒い球と、最初に取り出した赤い球を全て袋に戻す。
最後に袋から１個取り出した後、青い球と白い球が、それぞれ１個以上袋の外にある確率は？
*/


#module tama col, weight
#modinit int p1
	col = p1
	weight = 1
	return
#modcfunc get_color
	return col
#modfunc set_weight int p1
	weight = p1
	return
#modcfunc get_weight
	return weight
#modcfunc get_number
	mref i, 2
	return i

#global
//----------------------------
#module fukuro 袋の最大容量, 内容物, 内容物の数
#modinit int p1
	袋の最大容量 = p1
	内容物の数 = 0
	dimtype 内容物,5
	return
#modfunc 袋に物を一つ入れる var a
	if 現在の袋の容量(thismod) + get_weight(a) > 袋の最大容量{
		mes "袋に物を入れようとしましたが容量をオーバーしました"
		stop
	}

	内容物(内容物の数) = get_number(a)
	内容物の数++
	
	return
#modcfunc 現在の袋の容量 local count
	count = 0
	repeat 内容物の数
		count += get_weight(玉@(内容物(cnt)))
	loop
	return count
	
#modcfunc 袋からランダムに一つ取り出す
	if 内容物の数 == 0{
		mes "袋に物がない状態で取り出そうとしました"
		stop
	}
	ランダムに選んだ番号 = rnd(内容物の数)
	tmp = 内容物(ランダムに選んだ番号)
	内容物(ランダムに選んだ番号) = 内容物(内容物の数 - 1)
	内容物の数--
	return tmp
	
#modfunc 現在の状態を取得 array a
	a = 袋の最大容量, 内容物の数
	return
#global

randomize

#define 赤 0
#define 青 1
#define 白 2
#define 黒 3

dim 玉
repeat 10
	newmod 玉,tama, 赤
loop
repeat 8
	newmod 玉,tama, 青
loop
repeat 6
	newmod 玉,tama, 白
loop
repeat 4
	newmod 玉,tama, 黒
loop

#define 試行回数 10000

button gosub "実行",*play
gosub *play
stop

*play
color:boxf:color 200,200,200: pos 100,0
count = 0
repeat 試行回数
	gosub*simulate
	if (blue * white): count++
loop
mes ""+ (0.+count) * 100/試行回数 + "%"

return

*simulate

dim 袋
newmod 袋, fukuro, 50

foreach 玉
	袋に物を一つ入れる 袋,玉(cnt)
loop


//袋から３個取り出す
外にある数 = 0
repeat 3
	外(外にある数) = 袋からランダムに一つ取り出す(袋)
	外にある数++
loop
//取り出した赤の個数を数える
最初に取り出した赤の数 = 0
repeat 外にある数
	if get_color(玉(外(cnt))) == 赤{
		最初に取り出した赤(最初に取り出した赤の数) = 外(cnt)
		最初に取り出した赤の数++
	}
loop

//その分追加で取りだす
repeat 最初に取り出した赤の数
	外(外にある数) = 袋からランダムに一つ取り出す(袋)
	外にある数++
loop

//最初に取り出した赤と、全ての黒を袋に戻す
repeat 外にある数
	外玉番号 = 外(cnt)
	switch get_color(玉(外玉番号))
	case 赤
		flag = 1
		repeat 最初に取り出した赤の数
			if 外玉番号 == 最初に取り出した赤(cnt){
				flag = 0
				break
			}
		loop
		if flag: swbreak
	case 黒
		袋に物を一つ入れる 袋, 玉(外玉番号)
		外(cnt) = -1 ; 戻されたフラグ
	swbreak
	swend
loop

//最後に追加で取り出す
repeat 1
	外(外にある数) = 袋からランダムに一つ取り出す(袋)
	外にある数++
loop

//外にある玉をそれぞれカウントして終了
blue = 0
white = 0
black = 0
red = 0
repeat 外にある数
	if 外(cnt) = -1: continue
	switch get_color(玉(外(cnt)))
	case 青: blue++: swbreak
	case 白: white++: swbreak
	case 赤: red++:swbreak
	case 黒: black++:swbreak
	swend
loop
return