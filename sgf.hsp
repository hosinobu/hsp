#ifndef SGF_NODE
#module SGF_NODE 親ノード, 子ノード, 子ノードの数, 着手情報, 着手情報の数, 候補手, 候補手の数

#modinit int parent 

	親ノード = parent
	
	dim 子ノード
	子ノードの数 = 0
	
	sdim 着手情報,,2
	着手情報の数 = 0
	
	sdim 候補手
	候補手の数 = 0
	
	mref i, 2
	return i
	
//--情報取得
#modcfunc get_parent
	return 親ノード

#modfunc get_nodeinfo array a
	repeat 着手情報の数
		a(0,cnt) = 着手情報(0,cnt)
		a(1,cnt) = 着手情報(1,cnt)
	loop
	return 着手情報の数
	
#modcfunc get_property_data str s
	tmp = ""
	repeat 着手情報の数
		if 着手情報(0, cnt) = s{
			tmp = 着手情報(1, cnt)
			break
		}
	loop
	return tmp

#modfunc get_nodelist array a, int num
	mref i, 2
	a(num) = i
	if 親ノード != -1: get_nodelist SGF_NODE@global(親ノード), a, num + 1
	return

#modcfunc get_childs array a
	dim a, 子ノードの数
	memcpy a,子ノード,子ノードの数*4
	return 子ノードの数
	
////

#modfunc cut_node local j
	for j,, 子ノードの数
		cut_node SGF_NODE@global(子ノード(j))
	next
	delmod thismod
	return
#modfunc set_候補手 str s
	候補手(候補手の数) = s
	候補手の数++
	return
#modfunc get_候補手 array a
	repeat 候補手の数
		a.cnt = 候補手.cnt
	loop
	return 候補手の数

#modfunc set_property_data str s, str d

	already_exist = 0
	repeat 着手情報の数
		if 着手情報(0,cnt) = s{
			着手情報(1, cnt) = d
			already_exist++
			break
		}
	loop
	if already_exist == 0{
		着手情報(0, 着手情報の数) = s
		着手情報(1, 着手情報の数) = d
		着手情報の数++
	}
	
	return

#modfunc set_move_info str s1, str s2

	着手情報(0, 着手情報の数) = s1
	着手情報(1, 着手情報の数) = s2
	着手情報の数++
	return
	
#modcfunc serch_child int p1
	result = -1
	repeat 子ノードの数
		if 子ノード(cnt) == p1{
			result = cnt
			break
		}
	loop
	return result

#modcfunc serch_child_byxy str s1, str s2
	result = -1
	repeat 子ノードの数
		if get_property_data(SGF_NODE@global(子ノード(cnt)), s1) == s2{
			result = 子ノード(cnt)
			break
		}
	loop
	return result
	
#modfunc add_child int p1

	if serch_child(thismod, p1) == -1{
		子ノード(子ノードの数) = p1
		子ノードの数++
	}
	
	return

#modfunc del_child int p1

	if serch_child(thismod, p1) >= 0{
		memcpy 子ノード, 子ノード, 子ノードの数 - stat - 1 << 2, stat << 2
		子ノードの数--
	}
	return

#modcfunc get_rootnode
	if 子ノードの数 = 0{
		mref i,2
		return i
	}
	return 子ノード


#deffunc get_node_sgf int p1, var s
	s = "("
	_get_node_sgf SGF_NODE@global(p1), s
	s += ")"
	return

#modfunc _get_node_sgf var s, local ii

	s += ";"

	repeat 着手情報の数
		s += 着手情報(0,cnt) + "[" + 着手情報(1, cnt) + "]"
	loop
	
	for ii,0, 子ノードの数
	
		if 子ノードの数 >= 2{
			s+="("
		}
		_get_node_sgf SGF_NODE@global(子ノード(ii)), s
		
		if 子ノードの数 >= 2{
			s+=")"
		}
	next

	return

#modfunc set_root int p1

	repeat 子ノードの数
		if 子ノード(cnt) == p1{
			memcpy 子ノード,子ノード, cnt * 4, 4
			子ノード(0) = p1
		}
	loop
	
	return

#modfunc set_root_thisnode
	mref i, 2
	set_root SGF_NODE@global(親ノード), i //このノードが親の子ノードリストの最上位になる
	if get_parent(SGF_NODE@global(親ノード)) ! -1{ //親ノードが親を持っていたら
		set_root_thisnode SGF_NODE@global(親ノード) //親ノードに対しても繰り返す
	}
	return

#global

#module
#defcfunc 対応する括弧まで取得 str ss, var index, str s1, str s2, var result
	s = ss
	if strmid(s,index,1) != s1: dialog "指定位置が開始文字で始まっていません",1,"SGF解析エラー":end
	counter = 0
	repeat , index
		t = strmid(s,cnt,1)
		if t == "["
		if t == "": dialog "括弧が閉じられていません",1,"SGF解析エラー": end
		if t == s1: counter++
		if t == s2: counter--
		if counter == 0: r2 = cnt: break
	loop
	result = strmid(s, index + 1, r2 - index - 1)
	return r2
#defcfunc 対応する文字まで取得 var ss, int index, str s1, var result

	i = instr(ss,index,s1)
	if i == -1: dialog "対応する文字が見つからない",1,"SGF解析エラー":end
	result = strmid(ss,index,i)
	return index + i
#global


#module

#deffunc load_sgf      str ss, int node, local sgfs, local point, local nn
	nln = 0
#deffunc load_sgf_main str ss, int node, local sgfs, local point, local nn
	sgfs = ss
	nn = node
	//解析
	while strmid(sgfs, point, 1) != ""
		
		token = peek(sgfs, point)

		if token >= 'A' && token <= 'Z'{

			point = 対応する文字まで取得(sgfs, point, "[", P) + 1
			point = 対応する文字まで取得(sgfs, point, "]", D) + 1
			set_property_data SGF_NODE@global(nn), P, D
			
		}else:if token = '('{
			
			point = 対応する括弧まで取得(sgfs, point, "(", ")", f) + 1
			load_sgf_main f, nn
			
		}else:if (token == ';'){
			
			newmod SGF_NODE@global, SGF_NODE, nn
			new_id = stat

			stack(nln) = new_id: nln++

			if nn >= 0{
				add_child SGF_NODE@global(nn), new_id
			}
			nn = new_id
			point++
			
		}else{
			
			point++
			
		}
	wend
	
	return stack
#global
#endif