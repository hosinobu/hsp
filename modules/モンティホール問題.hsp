#module
#defcfunc montyhall int ドアの数, int 当たりドアの数, int 司会者が開ける当たりドアの数, int 司会者が開ける外れドアの数, int 司会者が開けた後変更する

	repeat ドアの数
		残りドア.cnt = cnt
	loop
	残りドアの数 = ドアの数

	//ドアに当たりを配置
	repeat limit(当たりドアの数, 0, ドアの数)
		当たり番号 = rnd(残りドアの数)
		当たりドア(cnt) = 残りドア(当たり番号)
		残りドアの数--
		残りドア(当たり番号) = 残りドア(残りドアの数)
	loop
	
	repeat ドアの数
		残りドア.cnt = cnt
	loop
	残りドアの数 = ドアの数
	
	//参加者がドアを選択
	
	参加者の選んだドア = rnd(ドアの数)
	残りドアの数--
	残りドア(参加者の選んだドア) = 残りドア(残りドアの数)

	//司会者がドアを開けるフェーズ
	司会者が開けた当たりドアの数 = 0
	司会者が開けた外れドアの数 = 0
	最後の選択ドアの数 = 0
	
	repeat 残りドアの数 // 残ったドアを一つずつ見ていく
		
		当たりドアか？ = 0
		for i,, 当たりドアの数
			if 当たりドア.i == 残りドア(cnt){
				当たりドアか？++
				_break
			}
		next
		
		if 当たりドアか？{
			if 司会者が開けた当たりドアの数 < 司会者が開ける当たりドアの数{
				司会者が開けた当たりドアの数++ ;このドアを開ける（当たり）
				continue
			}
		}else{
			if 司会者が開けた外れドアの数 < 司会者が開ける外れドアの数{
				司会者が開けた外れドアの数++ ;このドアを開ける（はずれ）
				continue
			}
		}

		//このドアは開けられていないので最終選択肢に追加
		最後の選択ドア(最後の選択ドアの数) = 残りドア(cnt)
		最後の選択ドアの数++
		
	loop

	//参加者がドアを変えるか選ぶフェーズ
	if 最後の選択ドアの数{
		if 司会者が開けた後変更する{
			参加者の選んだドア = 最後の選択ドア(rnd(最後の選択ドアの数))
		}
	}

	//最終チェック。選ばれたドアが当たりかどうか。
	result = 0
	repeat limit(当たりドアの数, 0, ドアの数)
		if 当たりドア.cnt == 参加者の選んだドア: result++: break
	loop
	
	return result

#global

randomize

m = "変更しない","変更する　"
試行回数 = 100000
s = ""
repeat 20
s += "" + cnt + "\n"
loop
a = 3
b= 1
c = 0
d = 1
combox a,,s
combox b,,s
combox c,,s
combox d,,s

button gosub "シミュレート",*simulate
stop

//シミュレーション開始
*simulate
	pos 85, 60
	color 250,250,250
	boxf
	color
	for i,,2
		count = 0
		repeat 試行回数
			count += montyhall(a,b,c,d, i)
		loop
		mes m.i + " 当たり回数→" + count
	next
	return