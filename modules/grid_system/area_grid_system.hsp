#ifndef area

#include "transform_grid.hsp"
#include "gridpos.hsp"
#include "centering_mes.hsp"
#include "area_save_load_manager.hsp"

dimtype areagrid@global, 5,100

#module area grid, 列数, 行数, grid_x, grid_y, padding_x, padding_y, margin_x, margin_y, parentid, draginfo

#defcfunc make_area int x, int y
	newmod areagrid@global, area, x, y
	return stat
#modinit int x, int y, local thismod_ID
	列数 = limit(x,1) ;(x)
	行数 = limit(y,1) ;(y)

	parentid = -1
	padding_x = 6
	padding_y = 6
	margin_x = 6
	margin_y = 6

	mref thismod_ID, 2
	set_grid_shape thismod_ID, 列数, 行数

	dim draginfo,8
	
	return thismod_ID

//グリッドに子を追加する
#deffunc add_grid_child int id, int child_id, int x, int y
	_add_grid_child areagrid@global(id), child_id, x, y
	return
#modfunc _add_grid_child int child_id, int x, int y, local thismod_ID
	grid(x, y) = child_id
	mref thismod_ID,2
	set_grid_parent child_id, thismod_ID
	return

#modcfunc get_open_grid array open_number, local i
	open_number = -1, -1
	repeat 行数
		for i,, 列数
			if grid(i, cnt) == -1{
				open_number = i, cnt
				break
			}
		next
	loop
	return open_number != -1

#deffunc push_grid_child int id, int child_id
	_push_grid_child areagrid@global(id), id, child_id
	return
#modfunc _push_grid_child int id, int child_id
	if get_open_grid(thismod, xy){
		add_grid_child id, child_id, xy, xy.1
		logmes "push_grid -> " +xy+","+xy.1 + "oya = " + id + " child = " + child_id
	}else{
		logmes "グリッドが空いていません"
	}
	return

///////////////////////////////////////////////
///////////////////セッター////////////////////
///////////////////////////////////////////////

#deffunc set_padding int p1, int p2, int p3
	_set_padding areagrid@global(p1), p2, p3
	return
#modfunc _set_padding int x, int y
	padding_x = x
	padding_y = y
	return

#deffunc set_margin int p1, int p2, int p3
	_set_margin areagrid@global(p1), p2, p3
	return
#modfunc _set_margin int x, int y
	margin_x = x
	margin_y = y
	return

//グリッド形状変更
#deffunc set_grid_shape int p1, int p2, int p3
	_set_grid_shape areagrid@global(p1), p2, p3
	return
#modfunc _set_grid_shape int x, int y
	transform grid, x, y
	列数 = x
	行数 = y
	grid_dim grid_x, 列数
	grid_dim grid_y, 行数
	//グリッドサイズを等幅で初期化
	repeat 列数: grid_x(cnt) = (ginfo_sx - margin_x *( 列数 - 1)) / 列数: loop
	repeat 行数: grid_y(cnt) = (ginfo_sy - margin_y *( 行数 - 1)) / 行数: loop
	return

//親を設定する。親に子を設定する時の内部利用
#deffunc local set_grid_parent int id, int pid
	if id == -1: return
	_set_grid_parent areagrid@global(id), pid
	return
#modfunc local _set_grid_parent int p1
	parentid = p1
	return

///////////////////////////////////////////////////////
///////////////////////////////////////////////////////

	
//自身のレクトを取得
#deffunc get_rect int p1, array rect
	_get_rect areagrid@global(p1), -1, rect
	return
#modfunc _get_rect int child_id, array rect, local thismod_ID, local i

	//親レクト取得
	if parentid == -1{
		//親がなければルートエリアということで、画面全体とする。
		rect = padding_x,　padding_y,　ginfo_sx - padding_x,　ginfo_sy - padding_y
	}else{

		mref thismod_ID, 2
		_get_rect areagrid@global(parentid), thismod_ID, rect
	}
	
	scale_grid grid_x , margin_x, rect(2) - rect(0)
	scale_grid grid_y , margin_y, rect(3) - rect(1)

	//子IDが指定されてれば探して、そのレクトを返す
	if child_id >= 0{
		find = 0
		repeat 行数
			for i,, 列数
				if grid(i, cnt) == child_id{
					get_grid_rect grid_x, grid_y, margin_x, margin_y, i, cnt, g_rect
					find++
					break
				}
			next
		loop
		if find{
			rp = rect(0),rect(1)
			rect(0) = g_rect(0) + rp(0) + padding_x
			rect(1) = g_rect(1) + rp(1) + padding_y
			rect(2) = g_rect(2) + rp(0) - padding_x
			rect(3) = g_rect(3) + rp(1) - padding_y
		}
	}
	return

//自身以下のレクトを処理 + (デバッグ用の可視化)
#deffunc draw_all_rect int p1, int debug_mode
	aid = -1
	g_area = -1 //つかまれたエリア
	_draw_all_rect areagrid@global(p1), 0 , debug_mode
	if debug_mode {
		color 255
		save_load_manager

		if g_area != -1{
			logmes strf("f%d",f_area)
			logmes strf("%d,%d,%d,%d",g_area, grid_value, gird_gx, gird_gy)
			if f_area != -1{
					//すでに一つ目選択済み
				add_grid_child f_area, grid_value, first_gx, first_gy //元のエリアグリッドに現在のエリアグリッドの値を設定
				add_grid_child g_area, first_value, grid_gx, grid_gy //自身のエリアに元のエリアグリッドの値を設定
				f_area = -1
				
			}else{
				f_area = g_area
				first_value = grid_value
				first_gx = grid_gx
				first_gy = grid_gy
			}
		}
		if f_area >= 0{
			get_gird_rect_area areagrid@global(f_area), first_gx, first_gy, rect
			circle rect,rect.1,rect.2,rect.3
		}
	}
	return
#modfunc get_gird_rect_area int x, int y, array resulta
		_get_rect thismod, -1, t
		get_grid_rect grid_x, grid_y, margin_x, margin_y, x, y, resulta
		resulta += t
		resulta.1 + =t.1
		reuslta.2 + = t
		resulta.3 += t.1
	return
#modfunc _draw_all_rect int depth, int debug_mode, local thismod_ID, local i, local result

	mref thismod_ID, 2	
	get_rect thismod_ID, result

	if debug_mode{ 
		margin = margin_x, margin_y
		//グリッド移動処理
		
		grid_manager grid_x, grid_y, result, margin, draginfo
		if in_rect(result){
			aid = thismod_ID
			if aid == thismod_ID{
				gx = draginfo(6)
				gy = draginfo(7)
				if _getkey(1) == 1{
					g_area = aid
					grid_gx = gx
					grid_gy = gy
					grid_value = grid(gx,gy)
				}
			}
		}


		
		
		//エリア描画
		c = area_colors(depth \ length(area_colors))
		color c >> 16 & 255, c >> 8 & 255, c & 255
		centering_mes thismod_ID, depth, result
		
	}
	

	repeat 行数
		for i,, 列数
			if grid(i, cnt) != -1{
				_draw_all_rect areagrid@global(grid(i,cnt)), depth + 1, debug_mode
			}
		next
	loop

	if debug_mode{
		//グリッド描画
		color 0,235,0
		ex = 0
		xsize =  get_gridSize(grid_x,margin_x)
		ysize =  get_gridSize(grid_y,margin_y)
		repeat length(grid_x) - 1
			ex += grid_x(cnt)
			boxf result + ex ,result.1     , result + ex + margin_x, result.1  + ysize
			ex += margin_x
		loop
		ey = 0
		repeat length(grid_y) - 1
			ey += grid_y(cnt)
			boxf result      ,result.1 + ey, result + xsize , result.1 + ey + margin_y
			ey += margin_y
		loop
	}
	
	return
	
#deffunc init_area_color_list
	area_colors = $000000,$ffff00,$00FFFF,$0000ff,$FF00FF
	f_area = -1
	return
#defcfunc get_in_area
	return aid
#deffunc get_in_grid array a
	a = gx, gy
	return
	
#defcfunc local in_rect array a
	return a(0) <= mousex && a(1) <= mousey && a(2) >= mousex && a(3) >= mousey

#global
init_area_color_list

//////矩形モック
#module area_grid_system_mock
//矩形モックを設定する関数
#deffunc set_rect_mock int _area, int p1, int p2, int p3, int p4
	logmes "mocklist_len = " + length(mocklist)
	mocklist(0, _area) = p1, p2, p3, p4
	return
#deffunc get_rect_mock var a
	dim a,length(mocklist),length2(mocklist)
	memcpy a,mocklist, varsize(mocklist)
	return
#deffunc init_area_grid_system_mock
	dim mocklist, 4, 1000
	
	return
#global
init_area_grid_system_mock
////////////

#endif

#if 0
root = make_area(2,2)
c = make_area(2,2)
d = make_area(2,2)
e = make_area(2,2)
f = make_area()
g = make_area()
h = make_area()

add_grid_child root, c , 0,0
add_grid_child c   , d , 1,0
add_grid_child c   , e , 0,1
push_grid_child e  , f
push_grid_child e  , g
push_grid_child e  , h


screen 0,700,700
debugmode = 1
*main

	manage_keyfps
	color 200,200,200: boxf 0,0, ginfo_winx, ginfo_winy
	draw_all_rect root, debugmode
	if getdbl_ms(17,200): debugmode^1
	redraw: redraw 2
	

	goto*main
#endif